<?xml version="1.0" encoding="UTF-8" ?>

<schema name="example" version="1.5">
  

 <fields>
        
   <field name="id" type="string" indexed="true" stored="true" required="true" multiValued="false" /> 

   <!-- Common metadata fields, named specifically to match up with
     SolrCell metadata when parsing rich documents such as Word, PDF.
     Some fields are multiValued only because Tika currently may return
     multiple values for them. Some metadata is parsed from the documents,
     but there are some which come from the client context:
       "content_type": From the HTTP headers of incoming stream
       "resourcename": From SolrCell request param resource.name
   -->
   <field name="title" type="text_general" indexed="true" stored="true" multiValued="true"/>
   <field name="subject" type="string" indexed="true" stored="true" multiValued="true"/>
   <field name="description" type="text_general" indexed="true" stored="true"/>
   <field name="comments" type="text_general" indexed="true" stored="true"/>
   <field name="author" type="string" indexed="true" stored="true"/>
   <field name="keywords" type="text_general" indexed="true" stored="true"/>  <!-- TEG: never seen anything in this field in netarchive. UNUSED? -->
   <field name="category" type="text_general" indexed="true" stored="true"/>
   <field name="resourcename" type="text_general" indexed="true" stored="true"/>
   <field name="url" type="string_disk" indexed="true" stored="true" multiValued="false" docValues="true"/>
   <field name="content_type" type="string" indexed="true" stored="true" multiValued="true"/>
   <field name="last_modified" type="date" indexed="true" stored="true"/>
   <field name="last_modified_year" type="string" indexed="true" stored="true"/>
   <field name="links" type="string" indexed="true" stored="true" multiValued="true"/>

   <!-- Main body of document extracted by SolrCell.
        NOTE: This field is not indexed by default, since it is also copied to "text"
        using copyField below. This is to save space. Use this field for returning and
        highlighting document content. Use the "text" field to search the content. -->
   <!-- BL: -->
   <field name="content_text" type="text_general" indexed="true" stored="true" multiValued="true"/>
   <field name="content_text_length" type="tint" indexed="true" stored="true" multiValued="false"/>
   
   <!-- A general field to deposit metadata into so it can be searched even when unstructured. -->
   <field name="content_metadata" type="text_general" indexed="true" stored="true" multiValued="false"/>
   <!-- -BL -->

   <!-- catchall field, containing all other searchable text fields (implemented
        via copyField further on in this schema  -->
   <field name="text" type="text_general" indexed="true" stored="false" multiValued="true"/>

   <!-- catchall text field that indexes tokens both normally and in reverse for efficient
        leading wildcard queries. -->
   <field name="text_rev" type="text_general_rev" indexed="true" stored="false" multiValued="true"/>
   

   <field name="payloads" type="payloads" indexed="true" stored="true"/>

   <field name="_version_" type="long" indexed="true" stored="true"/>

   <!-- Uncommenting the following will create a "timestamp" field using
        a default value of "NOW" to indicate when each document was indexed.
     -->
   <!--
   <field name="timestamp" type="date" indexed="true" stored="true" default="NOW" multiValued="false"/>
   -->
          
   <!-- wa.bl.uk fields begin -->
   
   <!-- Core fields, in addition to those above -->
   <!-- The id_long is a long integer ID field used to distinguish records when integrated into systems 
        that required integer IDs.  Not guarenteed to be unique, unlike 'id': -->
   <field name="id_long" type="long" indexed="true" stored="true" multiValued="false"/>
   <!-- The url_type is used to distinguish certain URLs, e.g. so they can be 'title level records'.
        Values are 'slashpage' (for a hosts homepage), or 'embed' ? -->
   <field name="url_type" type="text_general" indexed="true" stored="true"/>
   <!-- Length of the content, in bytes: -->
   <field name="content_length" type="tint" indexed="true" stored="true" multiValued="false"/>
   <!-- The content encoding: -->
   <field name="content_encoding" type="string" indexed="true" stored="true" multiValued="false"/>
   <!-- The content language - ISO 639 Language Codes: -->
   <field name="content_language" type="string" indexed="true" stored="true" multiValued="false"/>
   <!-- The 'normalised' (simplified) content type: -->
   <field name="content_type_norm" type="string_disk" indexed="true" stored="true" multiValued="false" default="other" docValues="true"/>
   
   <!-- The harvest date, but in wayback format: 'YYYYMMDDHHMMSS' -->   
   <field name="wayback_date" type="string" indexed="true" stored="true" multiValued="false"/>
   <!-- The ealiest harvest/crawl date, as a date -->
   <field name="crawl_date" type="tdate" indexed="true" stored="true" multiValued="false"/>
   <!-- The harvest/crawl year, for faceting -->
   <field name="crawl_year" type="string_disk" indexed="true" stored="true" multiValued="false" docValues="true"/>
   <!-- The harvest/crawl year and month, for faceting -->
   <field name="crawl_year_month" type="string" indexed="true" stored="true" multiValued="false"/>
   <!-- The harvest/crawl year, month and day, for faceting -->
   <field name="crawl_year_month_day" type="string" indexed="true" stored="true" multiValued="false"/>
   <!-- The harvest/crawl dates, as a multivalued series of date -->
   <field name="crawl_dates" type="tdate" indexed="true" stored="true" multiValued="true"/>
   
   <!-- The domain for this URL: -->
   <field name="host" type="string_disk" indexed="true" stored="true" multiValued="false"  docValues="true"/>
   <!-- The private suffix a.k.a domain for this host: -->
   <field name="domain" type="string_disk" indexed="true" stored="true" multiValued="false" docValues="true"/>
   <!-- The public suffix of the host domain, i.e. co.uk, org, etc: -->
   <field name="public_suffix" type="string_disk" indexed="true" stored="true" multiValued="false" docValues="true"/>
   
   <!-- The hostnames of discovered outlinks -->
   <field name="links_hosts" type="string" indexed="true" stored="true" multiValued="true"/>
   <!-- The private suffixs of the target domains of any links, i.e. example.co.uk, example.org, etc: -->
   <field name="links_domains" type="string" indexed="true" stored="true" multiValued="true"/>
   <!-- The public suffixs of the target domains of any links, i.e. co.uk, org, etc: -->
   <field name="links_public_suffixes" type="string" indexed="true" stored="true" multiValued="true"/>
   
   <!-- The digest/hash of the content (e.g. sha1:UYIPOGACBXSSCQVMBGTCGYOFBHFO5TTL, WARC only?): -->
   <field name="hash" type="string" indexed="true" stored="true" multiValued="true"/>

   <!-- The combined hash and url of the content, so allow us to identify unchanged resources. Populated by copying. -->
   <field name="hash_and_url" type="string" indexed="false" stored="true" multiValued="false"/>

   <!-- The referring URL - not actually populated at present. -->   
   <field name="referrer_url" type="string" indexed="false" stored="true" multiValued="false"/>
   
   <!-- Core fields to be removed? -->
   <field name="spell" type="textSpell" indexed="true" stored="false" multiValued="true"/>
   <field name="text_ns" type="text_general" indexed="true" stored="false" multiValued="true"/>
   
     <!-- The publication date, as a date -->
   <field name="publication_date" type="tdate" indexed="true" stored="true" multiValued="false"/>
   <!-- The publication year, for faceting -->
   <field name="publication_year" type="string" indexed="true" stored="true" multiValued="false"/>
   
   <!-- Collections this item belongs to (top-level, not sub-collections) -->
   <field name="collection" type="string" indexed="true" stored="true" multiValued="true"/>
   
   <!-- All collections and sub-collections this item belongs to -->
   <field name="collections" type="string" indexed="true" stored="true" multiValued="true"/>
   
   <!-- NOTE on Text - note that neither 'text' nor 'text_ns' are stored, and therefore not retrievable/fragment-highlight-able -->
   
   <!-- WCT fields -->
   <field name="wct_target_id" type="string" indexed="true" stored="true" multiValued="false"/>
   <field name="wct_instance_id" type="int" indexed="true" stored="true" multiValued="false"/>
   <field name="wct_collections" type="string" indexed="true" stored="true" multiValued="true"/>
   <field name="wct_subjects" type="string" indexed="true" stored="true" multiValued="true"/>
   <field name="wct_description" type="text_general" indexed="true" stored="true"/> <!-- TEG: never seen anything in this field in netarchive. UNUSED? -->
   <field name="wct_title" type="string" indexed="true" stored="true"/> <!-- TEG: never seen anything in this field in netarchive. UNUSED? -->
   <field name="wct_agency" type="string" indexed="true" stored="true" multiValued="false"/> <!-- default="British Library"/  -->
   <!-- Format fields -->

   <!-- The version of the content type, e.g. '1.4' for PDF-1.4: -->
   <field name="content_type_version" type="string" indexed="true" stored="true" multiValued="false"/>
   <!-- The 'full' content type, e.g. including charset parameters: -->
   <field name="content_type_full" type="string" indexed="true" stored="true" multiValued="false"/>
   <!-- The content type, as determined via Apache Tika: -->
   <field name="content_type_tika" type="string" indexed="true" stored="true" multiValued="false"/>
   <!-- The content type, as determined by Droid: -->
   <field name="content_type_droid" type="string" indexed="true" stored="true" multiValued="false"/>
   <!-- The content type, as supplied by the original server: -->
   <field name="content_type_served" type="string" indexed="true" stored="true" multiValued="false"/>
   <!-- The content type, as supplied by the URI extension: -->
   <field name="content_type_ext" type="string" indexed="true" stored="true" multiValued="false"/>
   <!-- The first four bytes of the bitstream, suitably hex-encoded as a string ('xxxxxxxx'): -->
   <field name="content_ffb" type="string" indexed="true" stored="true" multiValued="false"/>
   <!-- The binary n-grams first few bytes of the bitstream, hex-encoded and space separated ('xx xx xx xx'): -->
   <field name="content_first_bytes" type="hex_text_shingle" indexed="true" stored="true" multiValued="false"/>
   
   <!-- The identification of the server that produced the response: -->
   <field name="server" type="string" indexed="true" stored="true" multiValued="true"/>

   <!-- The software generators or creator tools, that can be determined from the item: -->
   <field name="generator" type="string" indexed="true" stored="true" multiValued="true"/>

   <!-- Any Parse Error encountered while attempting to extract metadata and text: -->
   <field name="parse_error" type="string" indexed="true" stored="true" multiValued="true"/>

   <!-- Content-based fields -->
   
   <!-- Postcode fields: -->
   <!-- The full postcode, e.g. LS11 5RR. -->
   <field name="postcode" type="string" indexed="true" stored="true" multiValued="true"/>
   <!-- The postcode district, e.g. LS11. -->
   <field name="postcode_district" type="string" indexed="true" stored="true" multiValued="true"/>
   <!-- The locations mentioned in each page. -->
   <field name="locations" type="location" indexed="true" stored="true" multiValued="true"/>
   
   <!-- Sentiment analysis, as facets and as score: -->
   <field name="sentiment" type="string" indexed="true" stored="true" multiValued="false"/>
   <field name="sentiment_score" type="float" indexed="true" stored="true" multiValued="false"/>
   
   <!-- The size of images, in pixels? or tags/ranges? -->
   <field name="image_size" type="tint" indexed="true" stored="true" multiValued="true"/>

   <!-- The different HTML elements used by the document -->
   <field name="elements_used" type="string" indexed="true" stored="true" multiValued="true"/>

   <!-- Fuzzy hashing for detecting similar content.
        Uses a dynamic field definition to allow for variations in block sizes. -->
   <dynamicField name="ssdeep_hash_bs_*" type="string" indexed="true" stored="true" multiValued="false"/>
   <dynamicField name="ssdeep_hash_ngram_bs_*" type="literal_ngram" indexed="true" stored="true" multiValued="false"/>
   
   <!-- Details of any embedded licenses: -->
   <field name="license_url" type="string" indexed="true" stored="true" multiValued="true"/>

   <!-- wa.bl.uk fields end -->


   <!-- Dynamic field definitions allow using convention over configuration
       for fields via the specification of patterns to match field names. 
       EXAMPLE:  name="*_i" will match any field ending in _i (like myid_i, z_i)
       RESTRICTION: the glob-like pattern in the name attribute must have
       a "*" only at the start or the end.  -->
   
   <dynamicField name="*_i"  type="int"    indexed="true"  stored="true"/>
   <dynamicField name="*_is" type="int"    indexed="true"  stored="true"  multiValued="true"/>
   <dynamicField name="*_s"  type="string"  indexed="true"  stored="true" />
   <dynamicField name="*_ss" type="string"  indexed="true"  stored="true" multiValued="true"/>
   <dynamicField name="*_l"  type="long"   indexed="true"  stored="true"/>
   <dynamicField name="*_ls" type="long"   indexed="true"  stored="true"  multiValued="true"/>
   <dynamicField name="*_t"  type="text_general"    indexed="true"  stored="true"/>
   <dynamicField name="*_txt" type="text_general"   indexed="true"  stored="true" multiValued="true"/>
   <dynamicField name="*_b"  type="boolean" indexed="true" stored="true"/>
   <dynamicField name="*_bs" type="boolean" indexed="true" stored="true"  multiValued="true"/>
   <dynamicField name="*_f"  type="float"  indexed="true"  stored="true"/>
   <dynamicField name="*_fs" type="float"  indexed="true"  stored="true"  multiValued="true"/>
   <dynamicField name="*_d"  type="double" indexed="true"  stored="true"/>
   <dynamicField name="*_ds" type="double" indexed="true"  stored="true"  multiValued="true"/>

   <!-- Type used to index the lat and lon components for the "location" FieldType -->
   <dynamicField name="*_coordinate"  type="tdouble" indexed="true"  stored="false" />

   <dynamicField name="*_dt"  type="date"    indexed="true"  stored="true"/>
   <dynamicField name="*_dts" type="date"    indexed="true"  stored="true" multiValued="true"/>
   <dynamicField name="*_p"  type="location" indexed="true" stored="true"/>

   <!-- some trie-coded dynamic fields for faster range queries -->
   <dynamicField name="*_ti" type="tint"    indexed="true"  stored="true"/>
   <dynamicField name="*_tl" type="tlong"   indexed="true"  stored="true"/>
   <dynamicField name="*_tf" type="tfloat"  indexed="true"  stored="true"/>
   <dynamicField name="*_td" type="tdouble" indexed="true"  stored="true"/>
   <dynamicField name="*_tdt" type="tdate"  indexed="true"  stored="true"/>

   <dynamicField name="*_pi"  type="pint"    indexed="true"  stored="true"/>

   <dynamicField name="ignored_*" type="ignored" multiValued="true"/>
   <dynamicField name="attr_*" type="text_general" indexed="true" stored="true" multiValued="true"/>

   <dynamicField name="random_*" type="random" />

   <!-- uncomment the following to ignore any fields that don't already match an existing 
        field name or dynamic field, rather than reporting them as an error. 
        alternately, change the type="ignored" to some other type e.g. "text" if you want 
        unknown fields indexed and/or stored by default --> 
   <!--dynamicField name="*" type="ignored" multiValued="true" /-->
   
 </fields>


 <!-- Field to use to determine and enforce document uniqueness. 
      Unless this field is marked with required="false", it will be a required field
   -->
 <uniqueKey>id</uniqueKey>

 <!-- DEPRECATED: The defaultSearchField is consulted by various query parsers when
  parsing a query string that isn't explicit about the field.  Machine (non-user)
  generated queries are best made explicit, or they can use the "df" request parameter
  which takes precedence over this.
  Note: Un-commenting defaultSearchField will be insufficient if your request handler
  in solrconfig.xml defines "df", which takes precedence. That would need to be removed.
 <defaultSearchField>text</defaultSearchField> -->

 
  <solrQueryParser defaultOperator="AND"/>

  <!-- copyField commands copy one field to another at the time a document
        is added to the index.  It's used either to index the same field differently,
        or to add multiple fields to the same field for easier/faster searching.  -->

   <!-- wa.bl.uk copies begin -->
   <!-- Metadata fields to add to default search: -->
   <copyField source="author" dest="text"/>  
   <copyField source="wct_title" dest="text"/>
   <copyField source="wct_description" dest="text"/>
   <copyField source="url" dest="text"/>

   <!-- wa.bl.uk end begin -->
 
  <types>
   <!-- wa.bl.uk fieldTypes begin -->
   <fieldType name="textSpell" class="solr.TextField"
      positionIncrementGap="100">
      <analyzer type="index">
         <tokenizer class="solr.StandardTokenizerFactory" />
         <filter class="solr.StopFilterFactory" ignoreCase="true"
            words="stopwords.txt" />
         <filter class="solr.StandardFilterFactory" />
         <filter class="solr.LowerCaseFilterFactory" />
         <filter class="solr.RemoveDuplicatesTokenFilterFactory" />
      </analyzer>
      <analyzer type="query">
         <tokenizer class="solr.StandardTokenizerFactory" />
         <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt"
            ignoreCase="true" expand="true" />
         <filter class="solr.StopFilterFactory" ignoreCase="true"
            words="stopwords.txt" />
         <filter class="solr.StandardFilterFactory" />
         <filter class="solr.LowerCaseFilterFactory" />
         <filter class="solr.RemoveDuplicatesTokenFilterFactory" />
      </analyzer>
   </fieldType>
   <fieldtype name="literal_ngram" stored="false" indexed="true" class="solr.TextField" >
      <analyzer>
         <tokenizer class="solr.WhitespaceTokenizerFactory"/>
         <filter class="solr.NGramFilterFactory" minGramSize="2" maxGramSize="5" />
      </analyzer>
   </fieldtype>
   <fieldType name="hex_text_shingle" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <!-- TODO Determine if larger shingle sizes are worth using, given there will be post-hoc stitching anyway. -->
        <filter class="solr.ShingleFilterFactory" minShingleSize="4" maxShingleSize="8"
             outputUnigrams="false" outputUnigramsIfNoShingles="false" tokenSeparator=" "/>
      </analyzer>
   </fieldType>
   <!-- wa.bl.uk fieldTypes end -->  
  
    <!-- field type definitions. The "name" attribute is
       just a label to be used by field definitions.  The "class"
       attribute and any other attributes determine the real
       behavior of the fieldType.
         Class names starting with "solr" refer to java classes in a
       standard package such as org.apache.solr.analysis
    -->

    <!-- The StrField type is not analyzed, but indexed/stored verbatim. -->
    
    <fieldType name="string" class="solr.StrField" sortMissingLast="true" />
    <fieldType name="string_disk" class="solr.StrField" sortMissingLast="true" docValuesFormat="Disk" />

    <!-- boolean type: "true" or "false" -->
    <fieldType name="boolean" class="solr.BoolField" sortMissingLast="true"/>

    <!--
      Default numeric field types. For faster range queries, consider the tint/tfloat/tlong/tdouble types.
    -->
    <fieldType name="int" class="solr.TrieIntField" precisionStep="0" positionIncrementGap="0"/>
    <fieldType name="float" class="solr.TrieFloatField" precisionStep="0" positionIncrementGap="0"/>
    <fieldType name="long" class="solr.TrieLongField" precisionStep="0" positionIncrementGap="0"/>
    <fieldType name="double" class="solr.TrieDoubleField" precisionStep="0" positionIncrementGap="0"/>

    <!--
     Numeric field types that index each value at various levels of precision
     to accelerate range queries when the number of values between the range
     endpoints is large. See the javadoc for NumericRangeQuery for internal
     implementation details.

     Smaller precisionStep values (specified in bits) will lead to more tokens
     indexed per value, slightly larger index size, and faster range queries.
     A precisionStep of 0 disables indexing at different precision levels.
    -->
    <fieldType name="tint" class="solr.TrieIntField" precisionStep="8" positionIncrementGap="0"/>
    <fieldType name="tfloat" class="solr.TrieFloatField" precisionStep="8" positionIncrementGap="0"/>
    <fieldType name="tlong" class="solr.TrieLongField" precisionStep="8" positionIncrementGap="0"/>
    <fieldType name="tdouble" class="solr.TrieDoubleField" precisionStep="8" positionIncrementGap="0"/>

    <!-- The format for this date field is of the form 1995-12-31T23:59:59Z, and
         is a more restricted form of the canonical representation of dateTime
         http://www.w3.org/TR/xmlschema-2/#dateTime    
         The trailing "Z" designates UTC time and is mandatory.
         Optional fractional seconds are allowed: 1995-12-31T23:59:59.999Z
         All other components are mandatory.

         Expressions can also be used to denote calculations that should be
         performed relative to "NOW" to determine the value, ie...

               NOW/HOUR
                  ... Round to the start of the current hour
               NOW-1DAY
                  ... Exactly 1 day prior to now
               NOW/DAY+6MONTHS+3DAYS
                  ... 6 months and 3 days in the future from the start of
                      the current day
                      
         Consult the DateField javadocs for more information.

         Note: For faster range queries, consider the tdate type
      -->
    <fieldType name="date" class="solr.TrieDateField" precisionStep="0" positionIncrementGap="0"/>

    <!-- A Trie based date field for faster date range queries and date faceting. -->
    <fieldType name="tdate" class="solr.TrieDateField" precisionStep="6" positionIncrementGap="0"/>


    <!--Binary data type. The data should be sent/retrieved in as Base64 encoded Strings -->
    <fieldtype name="binary" class="solr.BinaryField"/>

    <!--
      Note:
      These should only be used for compatibility with existing indexes (created with lucene or older Solr versions).
      Use Trie based fields instead. As of Solr 3.5 and 4.x, Trie based fields support sortMissingFirst/Last
      
      Plain numeric field types that store and index the text
      value verbatim (and hence don't correctly support range queries, since the
      lexicographic ordering isn't equal to the numeric ordering)
    -->
    <fieldType name="pint" class="solr.IntField"/>
    <fieldType name="plong" class="solr.LongField"/>
    <fieldType name="pfloat" class="solr.FloatField"/>
    <fieldType name="pdouble" class="solr.DoubleField"/>
    <fieldType name="pdate" class="solr.DateField" sortMissingLast="true"/>

    <fieldType name="random" class="solr.RandomSortField" indexed="true" />


    <!-- A text field that only splits on whitespace for exact matching of words -->
    <fieldType name="text_ws" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
      </analyzer>
    </fieldType>

    <!-- A general text field that has reasonable, generic
         cross-language defaults: it tokenizes with StandardTokenizer,
	 removes stop words from case-insensitive "stopwords.txt"
	 (empty by default), and down cases.  At query time only, it
	 also applies synonyms. -->
    <fieldType name="text_general" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true" />
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true" />  
      </analyzer>
    </fieldType>
        
    <!-- Just like text_general except it reverses the characters of
	 each token, to enable more efficient leading wildcard queries. -->
    <fieldType name="text_general_rev" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true" />
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.ReversedWildcardFilterFactory" withOriginal="true"
           maxPosAsterisk="3" maxPosQuestion="2" maxFractionAsterisk="0.33"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true" />
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
    </fieldType>

    <!-- charFilter + WhitespaceTokenizer  -->
    <!--
    <fieldType name="text_char_norm" class="solr.TextField" positionIncrementGap="100" >
      <analyzer>
        <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
      </analyzer>
    </fieldType>
    -->

    <!-- This is an example of using the KeywordTokenizer along
         With various TokenFilterFactories to produce a sortable field
         that does not include some properties of the source text
      -->
    <fieldType name="alphaOnlySort" class="solr.TextField" sortMissingLast="true" omitNorms="true">
      <analyzer>
        <!-- KeywordTokenizer does no actual tokenizing, so the entire
             input string is preserved as a single token
          -->
        <tokenizer class="solr.KeywordTokenizerFactory"/>
        <!-- The LowerCase TokenFilter does what you expect, which can be
             when you want your sorting to be case insensitive
          -->
        <filter class="solr.LowerCaseFilterFactory" />
        <!-- The TrimFilter removes any leading or trailing whitespace -->
        <filter class="solr.TrimFilterFactory" />
        <!-- The PatternReplaceFilter gives you the flexibility to use
             Java Regular expression to replace any sequence of characters
             matching a pattern with an arbitrary replacement string, 
             which may include back references to portions of the original
             string matched by the pattern.
             
             See the Java Regular Expression documentation for more
             information on pattern and replacement string syntax.
             
             http://java.sun.com/j2se/1.6.0/docs/api/java/util/regex/package-summary.html
          -->
        <filter class="solr.PatternReplaceFilterFactory"
                pattern="([^a-z])" replacement="" replace="all"
        />
      </analyzer>
    </fieldType>
    
    <fieldtype name="phonetic" stored="false" indexed="true" class="solr.TextField" >
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.DoubleMetaphoneFilterFactory" inject="false"/>
      </analyzer>
    </fieldtype>

    <fieldtype name="payloads" stored="false" indexed="true" class="solr.TextField" >
      <analyzer>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <!--
        The DelimitedPayloadTokenFilter can put payloads on tokens... for example,
        a token of "foo|1.4"  would be indexed as "foo" with a payload of 1.4f
        Attributes of the DelimitedPayloadTokenFilterFactory : 
         "delimiter" - a one character delimiter. Default is | (pipe)
	 "encoder" - how to encode the following value into a playload
	    float -> org.apache.lucene.analysis.payloads.FloatEncoder,
	    integer -> o.a.l.a.p.IntegerEncoder
	    identity -> o.a.l.a.p.IdentityEncoder
            Fully Qualified class name implementing PayloadEncoder, Encoder must have a no arg constructor.
         -->
        <filter class="solr.DelimitedPayloadTokenFilterFactory" encoder="float"/>
      </analyzer>
    </fieldtype>

    <!-- lowercases the entire field value, keeping it as a single token.  -->
    <fieldType name="lowercase" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.KeywordTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory" />
      </analyzer>
    </fieldType>

    <!-- 
      Example of using PathHierarchyTokenizerFactory at index time, so
      queries for paths match documents at that path, or in descendent paths
    -->
    <fieldType name="descendent_path" class="solr.TextField">
      <analyzer type="index">
	<tokenizer class="solr.PathHierarchyTokenizerFactory" delimiter="/" />
      </analyzer>
      <analyzer type="query">
	<tokenizer class="solr.KeywordTokenizerFactory" />
      </analyzer>
    </fieldType>
    <!-- 
      Example of using PathHierarchyTokenizerFactory at query time, so
      queries for paths match documents at that path, or in ancestor paths
    -->
    <fieldType name="ancestor_path" class="solr.TextField">
      <analyzer type="index">
	<tokenizer class="solr.KeywordTokenizerFactory" />
      </analyzer>
      <analyzer type="query">
	<tokenizer class="solr.PathHierarchyTokenizerFactory" delimiter="/" />
      </analyzer>
    </fieldType>

    <!-- since fields of this type are by default not stored or indexed,
         any data added to them will be ignored outright.  --> 
    <fieldtype name="ignored" stored="false" indexed="false" multiValued="true" class="solr.StrField" />

    <!-- This point type indexes the coordinates as separate fields (subFields)
      If subFieldType is defined, it references a type, and a dynamic field
      definition is created matching *___<typename>.  Alternately, if 
      subFieldSuffix is defined, that is used to create the subFields.
      Example: if subFieldType="double", then the coordinates would be
        indexed in fields myloc_0___double,myloc_1___double.
      Example: if subFieldSuffix="_d" then the coordinates would be indexed
        in fields myloc_0_d,myloc_1_d
      The subFields are an implementation detail of the fieldType, and end
      users normally should not need to know about them.
     -->
    <fieldType name="point" class="solr.PointType" dimension="2" subFieldSuffix="_d"/>

    <!-- A specialized field for geospatial search. If indexed, this fieldType must not be multivalued. -->
    <fieldType name="location" class="solr.LatLonType" subFieldSuffix="_coordinate"/>

    <!-- An alternative geospatial field type new to Solr 4.  It supports multiValued and polygon shapes.
      For more information about this and other Spatial fields new to Solr 4, see:
      http://wiki.apache.org/solr/SolrAdaptersForLuceneSpatial4
    -->
    <fieldType name="location_rpt" class="solr.SpatialRecursivePrefixTreeFieldType"
        geo="true" distErrPct="0.025" maxDistErr="0.000009" units="degrees" />

   
             

    
 </types>
  
  <!-- Similarity is the scoring routine for each document vs. a query.
       A custom Similarity or SimilarityFactory may be specified here, but 
       the default is fine for most applications.  
       For more info: http://wiki.apache.org/solr/SchemaXml#Similarity
    -->
  <!--
     <similarity class="com.example.solr.CustomSimilarityFactory">
       <str name="paramkey">param value</str>
     </similarity>
    -->

</schema>
